html {
    box-sizing: border-box;
  }
  
  /*The ::before and ::after pseudo-elements in CSS allows you to insert content onto a page without it needing to be in the HTML. */
  *, *::before, *::after {
    box-sizing: inherit;
  }
  
  #piano {
    background-color: #00471b;
    width: 992px;
    height: 290px;
    margin: 80px auto;
    padding: 90px 20px 0 20px;
    position: relative;
    border-radius: 10px;
  }
  
  /*You might have noticed the keys collapse when the browser window is smaller than 768px. 
  Set overflow to hidden in the first .keys selector, to take care of this issue. This property will hide any element that is pushed outside the set width value of .keys.*/
  .keys {
    background-color: #040404;
    width: 949px;
    height: 180px;
    padding-left: 2px;
    overflow: hidden;
  }
  
  .key {
    background-color: #ffffff;
    position: relative;
    width: 41px;
    height: 175px;
    margin: 2px;
    float: left;
    border-radius: 0 0 3px 3px;
  }
  
  /*Now it is time to use the pseudo-selectors you prepared for earlier. To create the black keys, add a new .key.black--key::after selector. 
  This will target the elements with the class key black--key, and select the pseudo-element after these elements in the HTML.
  In the new selector, set the background-color to #1d1e22. Also set the content property to "". This will make the pseudo-elements empty.
  The content property is used to set or override the content of the element. By default, the pseudo-elements created by the ::before and ::after pseudo-selectors are empty, 
  and the elements will not be rendered to the page. Setting the content property to an empty string "" will ensure the element is rendered to the page while still being empty.*/
  .key.black--key::after {
    background-color: #1d1e22;
    content: "";
    position: absolute;
    left: -18px;
    width: 32px;
    height: 100px;
    border-radius: 0 0 3px 3px;
  }
  
  .logo {
    width: 200px;
    position: absolute;
    top: 23px;
  }
  
  /*The @media at-rule, also known as a media query, is used to conditionally apply CSS. 
  Media queries are commonly used to apply CSS based on the viewport width using the max-width and min-width properties.*/
  @media (max-width: 768px) {
    #piano {
      width: 358px;
    }
  
    .keys {
      width: 318px;
    }
  
    .logo {
      width: 150px;
    }
  }
  
  /*Logical operators can be used to construct more complex media queries. The and logical operator is used to query two media conditions.*/
  @media (max-width: 1199px) and (min-width: 769px) {
  #piano {
    width: 675px;
  }
  .keys {
    width: 633px;
  }
  }